%import common.WS_INLINE

// Building blocks

_LINE_END: "$"

_DEC_NUMBER_START: "%d"
_DEC_NUMBER_END: "!d"
_SCOPE_START: "%s"
_SCOPE_END: "!s"
_PAREN_START: "%e"
_PAREN_END: "!e"

DIGIT: "1".."5"
DEC_DIGIT: "1".."5" | "a".."d" | "@"

INTEGER: _DEC_NUMBER_START DEC_DIGIT+ _DEC_NUMBER_END

LOWER_LETTER: "a".."g"
    | "q".."t"
    | "v".."x"
    | "z"
UPPER_LETTER: "A".."G"
    | "Q".."T"
    | "V".."X"
    | "Z"
SAFE_LOWER_LETTER: "b".."c"
    | "e".."g"
    | "q".."r"
    | "v".."x"
    | "z"

SAFE_LETTER: SAFE_LOWER_LETTER | UPPER_LETTER
LETTER: LOWER_LETTER | UPPER_LETTER
CNAME: SAFE_LETTER | LETTER (LETTER | DIGIT)+

IDENTIFIER: CNAME

_ASSIGN_SYMBOL: "ass"

ADD_SYMBOL: "a"
SUB_SYMBOL: "s"

DIV_SYMBOL: "d"
MUL_SYMBOL: "t"


// Types
// The ! is used to keep track of line numbers for error reporting
!void_type: "v@1d"
!decimal_type: "dect"

?type: void_type | decimal_type

// Expressions
STRING: "`" /.*?/ "`"
?literal: INTEGER | STRING

// Expressions:
expr: term ((ADD_SYMBOL | SUB_SYMBOL) term)*
term: factor ((MUL_SYMBOL | DIV_SYMBOL) factor)*
factor: literal | identifier_expr | exec_expr | _PAREN_START expr _PAREN_END
exec_expr: "exec" IDENTIFIER _PAREN_START expr* _PAREN_END
identifier_expr: IDENTIFIER

// Statements
ret_stmt: "ret" expr _LINE_END
var_decl_stmt: type IDENTIFIER _LINE_END
var_ass_stmt: IDENTIFIER _ASSIGN_SYMBOL expr _LINE_END
expr_stmt: expr _LINE_END

?statement: ret_stmt
    | expr_stmt
    | var_decl_stmt
    | var_ass_stmt

!block: _SCOPE_START (statement)* _SCOPE_END

param: type IDENTIFIER
params: param*
!function_def: "def" type IDENTIFIER params block

start: function_def+

%ignore WS_INLINE